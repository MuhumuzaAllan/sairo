// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
   id             String        @id @default(uuid())
   instructorId   String
   title          String        @db.Text
   subtitle       String?       @db.Text
   description    String?       @db.Text
   imgUrl         String?       @db.Text
   price          Float?
   isPublished    Boolean       @default(false)

   categoryId     String
   category       Category      @relation(fields: [categoryId], references: [id])

   subCategoryId  String
   subCategory    SubCategory   @relation(fields: [subCategoryId], references: [id])

   levelId        String?
   level          Level?         @relation(fields: [levelId], references: [id])  

   sections       Section[]

   createdAt      DateTime      @default(now())
   updatedAt      DateTime      @default(now())       

@@index([categoryId])
@@index([subCategoryId])
@@index([levelId])
}

model Category {
  id              String        @id @default(uuid())
  name            String        
  subCategories   SubCategory[]
  courses         Course[]
}

model SubCategory {
  id              String        @id @default(uuid())
  name            String        

  categoryId      String
  category        Category      @relation(fields: [categoryId], references: [id])

  courses         Course[]

  @@index([categoryId])
}

model Level {
  id              String        @id @default(uuid())
  name            String        

  courses         Course[]
}

model Section {
   id              String       @id @default(uuid())
   title           String
   description     String?      
   videoUrl        String?      
   position        Int
   isPublished     Boolean      @default(false)
   isFree          Boolean      @default(false)

   courseId        String
   course          Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

   muxData         MuxData?

   resources       Resource[]

   progress       Progress[]

   createdAt      DateTime     @default(now())
   updatedAt      DateTime     @default(now())

   @@index([courseId])
}

model MuxData {
   id              String       @id @default(uuid())
   assetId         String
   playbackId      String?

   sectionId       String       @unique
   section         Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)

   @@index([sectionId])
}

model Resource {
  id              String       @id @default(uuid())
  name            String
  fileUrl         String

  sectionId       String
  section         Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())

 
 @@index([sectionId])
}

model Progress {
  id              String       @id @default(uuid())
  studentId       String       @unique

  sectionId       String
  section         Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  isCompleted     Boolean     @default(false)

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())

 @@index([sectionId])
}